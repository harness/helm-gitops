apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitops
  labels:
    {{- include "gitops.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "gitops.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "gitops.selectorLabels" . | nindent 8 }}
    spec:
      {{- include "gitops.pullSecrets" . | nindent 6 }}
      serviceAccountName: {{ include "gitops.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        {{- if .Values.global.database.mongo.installed }}
        - name: wait-for-mongo
          image: {{ include "common.images.image" (dict "imageRoot" .Values.waitForInitContainer.image "global" .Values.global) }}
          imagePullPolicy: IfNotPresent
          args:
            - "pod"
            - "-lapp=mongodb-replicaset"
        {{- end }}
        {{- if .Values.global.database.timescaledb.installed }}
        - name: wait-for-timescale
          image: {{ include "common.images.image" (dict "imageRoot" .Values.waitForInitContainer.image "global" .Values.global) }}
          imagePullPolicy: IfNotPresent
          args:
            - "pod"
            - "-lapp=timescaledb-single-chart"
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image:  {{ include "common.images.image" (dict "imageRoot" .Values.image "global" .Values.global) }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: gitops-http
              containerPort: {{.Values.service.httpServerPort}}
              protocol: TCP
            - name: gitops-grpc
              containerPort: {{.Values.service.grpcServerPort}}
              protocol: TCP
          envFrom:
            - configMapRef:
                name: harness-gitops-config
          env:
            {{- include "harnesscommon.dbconnection.mongoEnv" . | indent 12 }}
            {{- if .Values.global.database.timescaledb.installed }}
            - name: TIMESCALE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.timescale.password.name }}
                  key: {{ .Values.timescale.password.key }}
            - name: GITOPS_SERVICE_TIMESCALE_URL
              value:  postgres://postgres:$(TIMESCALE_PASSWORD)@timescaledb-single-chart.{{ .Release.Namespace }}:5432/harness_gitops?sslmode=disable
            - name: GITOPS_SMP_ADMIN_TIMESCALE_URL
              value:  postgres://postgres:$(TIMESCALE_PASSWORD)@timescaledb-single-chart.{{ .Release.Namespace }}:5432/?sslmode=disable
            {{- else }}
            {{ include "harnesscommon.dbconnection.dbenvuser" (dict "type" "timescale" "variableName" "TIMESCALE_USERNAME" "secret" .Values.global.database.timescaledb.secretName "userKey" .Values.global.database.timescaledb.userKey ) | nindent 12 }}
            {{ include "harnesscommon.dbconnection.dbenvpassword" (dict "type" "timescale" "variableName" "TIMESCALE_PASSWORD" "secret" .Values.global.database.timescaledb.secretName "passwordKey" .Values.global.database.timescaledb.passwordKey ) | nindent 12 }}
            - name: GITOPS_SERVICE_TIMESCALE_URL
              value:  postgres://$(TIMESCALE_USERNAME):$(TIMESCALE_PASSWORD)@{{ index .Values.global.database.timescaledb.hosts 0}}/harness_gitops?sslmode=require
            - name: GITOPS_SMP_ADMIN_TIMESCALE_URL
              value: postgres://$(TIMESCALE_USERNAME):$(TIMESCALE_PASSWORD)@{{ index .Values.global.database.timescaledb.hosts 0}}/?sslmode=require
            {{- end}}
            - name: GITOPS_SERVICE_MONGODB_URL
              value: {{ include "harnesscommon.dbconnection.mongoConnection" (dict "database" "harness-gitops" "context" $) }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: {{.Values.service.httpServerPort}}
            initialDelaySeconds: 3
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /healthz
              port: {{.Values.service.httpServerPort}}
            initialDelaySeconds: 3
            periodSeconds: 30
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
        {{- if not .Values.global.database.timescaledb.installed }}
          volumeMounts:
            - name: timescaledb-cert
              mountPath: /opt/harness/svc
      volumes:
      - name: timescaledb-cert
        secret:
          secretName: {{ .Values.global.database.timescaledb.certName }}
          items:
          - key: {{ .Values.global.database.timescaledb.certKey }}
            path: timescaledb-pem
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
